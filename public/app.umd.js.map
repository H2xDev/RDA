{"version":3,"file":"app.umd.js","sources":["../core/graphics.ts","../core/event.ts","../core/renderer.ts","../core/entity.ts","../node_modules/matter-js/build/matter.js","../core/scene.ts","../core/utils/fp.ts","../core/utils/vectorUtil.ts","../core/utils/generateId.ts","../game/engine.ts","../core/sceneController.ts","../core/types/fileManagerEvents.enum.ts","../core/resourceManager.ts","../core/camera.ts","../core/sprite.ts","../game/entities/actor.ts","../game/entities/player.ts","../game/scenes/gameplay.ts","../main.ts"],"sourcesContent":["export class Graphics {\r\n    static Context: CanvasRenderingContext2D;\r\n\r\n    static grid(x: number, y: number, w: number, h: number, s: number) {\r\n        const { Context: c } = Graphics;\r\n\r\n        if (!c) return;\r\n\r\n        c.beginPath()\r\n\r\n        const linesV = (w / s) >> 0;\r\n        const linesH = (h / s) >> 0;\r\n\r\n        for (let i = 0; i <= linesH; i++) {\r\n            const x1 = x;\r\n            const x2 = x + w;\r\n            const _y = y + s * i;\r\n            \r\n            c.moveTo(x1, _y);\r\n            c.lineTo(x2, _y);\r\n        }\r\n\r\n        for (let i = 0; i <= linesV; i++) {\r\n            const y1 = y;\r\n            const y2 = y + h;\r\n            const _x = x + s * i;\r\n            \r\n            c.moveTo(_x, y1);\r\n            c.lineTo(_x, y2);\r\n        }\r\n\r\n\r\n        c.stroke();\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * Event Listener Options\r\n */\r\nexport interface EventListenerOptions {\r\n    /**\r\n     * Removes the listener after the trigger\r\n     */\r\n    once?: boolean;\r\n    /**\r\n     * Removes the listener after the trigger a certain number of times\r\n     */\r\n    takes?: number;\r\n}\r\n\r\n/**\r\n * @param T - type of details\r\n * @param H - type of return value\r\n */\r\nexport type EventHandler<T = any, H = void> = (details: T) => H;\r\n\r\nexport type UnsubscribeFunction = () => void;\r\n\r\nexport interface EventListener<E extends (string | number) = string, T = any, H = void> {\r\n    handler: EventHandler<T, H>;\r\n    options: EventListenerOptions;\r\n    event: E;\r\n}\r\n\r\nexport interface EventEmitterTypes<E extends (string | number) = string> {\r\n    [eventName: string]: EventListener<E>[];\r\n}\r\n\r\nexport class EventEmitter<EventList extends (string | number) = string> {\r\n    private events: EventEmitterTypes<EventList> = {}\r\n\r\n    /**\r\n     *\r\n     * @param event Event type\r\n     * @param handler listener\r\n     * @param options options\r\n     */\r\n    public on<T = any, H = void>(\r\n        event: EventList,\r\n        handler: EventHandler<T, H>,\r\n        options: EventListenerOptions = {},\r\n    ): UnsubscribeFunction {\r\n        if (!this.isEventTypeDefined(event)) {\r\n            this.defineEventType(event);\r\n        }\r\n\r\n        const eventListener: EventListener<EventList> = {\r\n            handler,\r\n            options,\r\n            event,\r\n        };\r\n\r\n        this.events[event].push(eventListener);\r\n\r\n        return () => this.removeListener(event, eventListener.handler);\r\n    }\r\n\r\n    public once<T = any, H = void>(...args: Parameters<EventEmitter<EventList>['on']>) {\r\n        args[2] = args[2] ? { ...args[2], once: true } : { once: true };\r\n        return this.on(...args);\r\n    }\r\n\r\n    public trigger<T = any>(eventName: EventList, details?: T): void {\r\n        if (!this.isEventTypeDefined(eventName)) {\r\n            return;\r\n        }\r\n        this.events[eventName].forEach((eventListener) => {\r\n            eventListener.handler.bind(this)(details);\r\n        });\r\n        this.events[eventName].forEach(this.checkEventListener.bind(this));\r\n    }\r\n\r\n    private checkEventListener(eventListener: EventListener<EventList>): void {\r\n        const { event: eventName } = eventListener;\r\n        if (eventListener.options.once) {\r\n            this.removeListener(eventName, eventListener.handler);\r\n        }\r\n\r\n        if (typeof eventListener.options.takes === 'number') {\r\n            // eslint-disable-next-line no-param-reassign\r\n            eventListener.options.takes -= 1;\r\n            if (eventListener.options.takes === 0) {\r\n                this.removeListener(eventName, eventListener.handler);\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeListener(event: EventList, handler: EventHandler): void {\r\n        this.events[event] = this.events[event].filter((e) => e.handler !== handler);\r\n\r\n        if (!this.events[event].length) {\r\n            delete this.events[event];\r\n        }\r\n    }\r\n\r\n    private isEventTypeDefined(eventName: EventList): boolean {\r\n        return !!this.events[eventName];\r\n    }\r\n\r\n    private defineEventType(eventName: EventList): void {\r\n        this.events[eventName] = [];\r\n    }\r\n}\r\n\r\nexport default {};\r\n","import { EventEmitter } from \"./event\";\r\n\r\ntype RendererEventList = 'beforeRender' | 'afterRender';\r\n\r\ninterface RendererOptions {\r\n    resolution: [number, number];\r\n    pixelated: boolean;\r\n    targetContainer: string;\r\n}\r\n\r\ntype RenderFunction = () => void;\r\n\r\nconst DEFAULT_OPTIONS: RendererOptions = {\r\n    resolution: [800, 480],\r\n    pixelated: true,\r\n    targetContainer: 'body',\r\n}\r\n\r\nexport class Renderer extends EventEmitter<RendererEventList> {\r\n    static DEFAULT_OPTIONS = DEFAULT_OPTIONS;\r\n\r\n    public domElement = document.createElement('canvas');\r\n    public context!: CanvasRenderingContext2D;\r\n\r\n    private options!: RendererOptions;\r\n\r\n    constructor(options?: Partial<RendererOptions>) {\r\n        super();\r\n\r\n        this.setOptions(options || {});\r\n    }\r\n\r\n    public setOptions(newOptions: Partial<RendererOptions>) {\r\n        this.options = {\r\n            ...Renderer.DEFAULT_OPTIONS,\r\n            ...newOptions,\r\n        }\r\n\r\n        this.applyOptions();\r\n    }\r\n\r\n    public render(func: RenderFunction) {\r\n        this.clear();\r\n        requestAnimationFrame(() => this.render(func));\r\n\r\n        this.trigger('beforeRender');\r\n        func();\r\n        this.trigger('afterRender');\r\n    }\r\n\r\n    public clear() {\r\n        const { context: c } = this;\r\n\r\n        c.fillStyle = \"#000\";\r\n        c.fillRect(0, 0, c.canvas.width, c.canvas.height);\r\n    }\r\n\r\n    private applyOptions() {\r\n        const [ width, height ] = this.options.resolution;\r\n        const { pixelated, targetContainer } = this.options;\r\n\r\n        this.domElement.width = width;\r\n        this.domElement.height = height;\r\n        this.context = this.domElement\r\n            .getContext('2d', { alpha: false })!;\r\n        \r\n        this.context.imageSmoothingEnabled = !pixelated;\r\n        this.domElement.style.imageRendering = pixelated ? 'pixelated' : '';\r\n\r\n        document\r\n            .querySelector(targetContainer)!\r\n            .appendChild(this.domElement);\r\n    }\r\n}\r\n","import { EventEmitter } from \"./event\";\r\nimport { Scene } from \"./scene\";\r\n\r\nexport enum EntityEvents {\r\n    SPAWN, DESTROY\r\n}\r\n\r\nexport class Entity extends EventEmitter<EntityEvents> {\r\n    protected scene!: Scene;\r\n    public position = { x: 0, y: 0 };\r\n\r\n    public update() {}\r\n\r\n    public setScene<T extends Scene>(scene: T) {\r\n        this.scene = scene;\r\n    }\r\n}","/*!\n * matter-js 0.17.1 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 22);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = __webpack_require__(14);\nvar Pair = __webpack_require__(9);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(12);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase)\n            Render.grid(render, engine.grid, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                grid.bucketWidth,\n                grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(20);\nvar Grid = __webpack_require__(21);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            grid: null,\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.grid = Grid.create(options.grid || options.broadphase);\n        engine.pairs = Pairs.create();\n\n        // temporary back compatibility\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            grid = engine.grid,\n            gridPairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n\n        // if world is dirty, we must flush the whole grid\n        if (world.isModified)\n            Grid.clear(grid);\n\n        // update the grid buckets based on current bodies\n        Grid.update(grid, allBodies, engine, world.isModified);\n        gridPairs = grid.pairsList;\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = Detector.collisions(gridPairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world,\n            bodies = Composite.allBodies(world);\n\n        Pairs.clear(engine.pairs);\n        Grid.clear(engine.grid);\n        Grid.update(engine.grid, bodies, engine, true);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated use `engine.grid`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                Vector.add(bodyA.positionImpulse, \n                    Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                    pair.confirmedActive = true;\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && !pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(23);\r\n\r\nMatter.Axes = __webpack_require__(10);\r\nMatter.Bodies = __webpack_require__(11);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(24);\r\nMatter.Constraint = __webpack_require__(8);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(21);\r\nMatter.Mouse = __webpack_require__(12);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(14);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(28);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(29);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.17.1\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(11);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(12);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(8);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar SAT = __webpack_require__(14);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(11);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});","import Matter from \"matter-js\";\r\nimport { Entity, EntityEvents } from \"./entity\";\r\nimport { EventEmitter } from \"./event\";\r\nimport {compose} from \"./utils/fp\";\r\nimport { generateId } from \"./utils/generateId\";\r\nimport { V } from './utils/vectorUtil';\r\n\r\nexport enum SceneEvents {\r\n    LOAD, DESTROY\r\n}\r\n\r\nexport class Scene extends EventEmitter<SceneEvents> {\r\n    private entities: { [k: string]: Entity } = {};\r\n    protected runner: Matter.Runner = Matter.Runner.create();\r\n\r\n    public engine: Matter.Engine = Matter.Engine.create();\r\n    public world: Matter.World = this.engine.world;\r\n    public render: Matter.Render = Matter.Render.create({\r\n        engine: this.engine,\r\n        options: {\r\n            width: 800,\r\n            height: 600,\r\n        }\r\n    });\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.start = this.start.bind(this);\r\n        this.destroy = this.destroy.bind(this);\r\n        this.preStart = this.preStart.bind(this);\r\n        this.postDestroy = this.postDestroy.bind(this);\r\n\r\n        const startHandler = compose(this.preStart, this.start);\r\n        const destroyHandler = compose(this.destroy, this.postDestroy);\r\n\r\n        this.on(SceneEvents.LOAD, startHandler)\r\n        this.on(SceneEvents.DESTROY, destroyHandler);\r\n    }\r\n\r\n    public addEntity<T extends Entity>(entity: T, id: string = generateId()) {\r\n        this.entities[id] = entity;\r\n        entity.setScene(this);\r\n        entity.trigger(EntityEvents.SPAWN);\r\n\r\n        return entity;\r\n    }\r\n\r\n    private updateObjects() {\r\n        const update = (entity: Entity) => entity.update?.();\r\n\r\n        Object\r\n            .values(this.entities)\r\n            .forEach(update);\r\n    }\r\n\r\n    public update() {\r\n        this.updateObjects();\r\n    }\r\n\r\n    private preStart() {\r\n        const { runner, engine, render } = this;\r\n        Matter.Runner.start(runner, engine);\r\n        Matter.Render.run(render);\r\n        Matter.Render.lookAt(render, {\r\n            min: V.Cr(0, 0),\r\n            max: V.Cr(800, 480),\r\n        })\r\n    }\r\n\r\n    public start() {};\r\n\r\n    public destroy() {};\r\n\r\n    private resetPhysics() {\r\n        const { runner, world, engine, render } = this;\r\n        Matter.World.clear(world, true);\r\n        Matter.Runner.stop(runner);\r\n        Matter.Engine.clear(engine);\r\n        Matter.Render.stop(render);\r\n    }\r\n\r\n    public postDestroy() {\r\n        this.entities = {};\r\n        this.resetPhysics();\r\n    }\r\n}\r\n","export const compose = <R>(fn1: (a: R) => R, ...fns: Array<(a: R) => R>) =>\r\n      fns.reduce((prevFn, nextFn) => value => prevFn(nextFn(value)), fn1);\r\n","export interface VectorLike {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class V {\r\n    static Add(v1: VectorLike, v2: VectorLike): VectorLike {\r\n        const { x: x1, y: y1 } = v1;\r\n        const { x: x2, y: y2 } = v2;\r\n\r\n        return {\r\n            x: x1 + x2,\r\n            y: y1 + y2,\r\n        };\r\n    }\r\n\r\n    static Sub(from: VectorLike, value: VectorLike): VectorLike {\r\n        const { x: x1, y: y1 } = from;\r\n        const { x: x2, y: y2 } = value;\r\n\r\n        return {\r\n            x: x1 - x2,\r\n            y: y1 - y2,\r\n        }\r\n    }\r\n\r\n    static Copy(v: VectorLike): VectorLike {\r\n        return JSON.parse(JSON.stringify(v));\r\n    }\r\n\r\n    static Dot(v1: VectorLike, v2: VectorLike): number {\r\n        return v1.x * v2.x + v1.y * v2.y;\r\n    }\r\n\r\n    static Mag(v1: VectorLike): number {\r\n        return Math.sqrt(\r\n            v1.x ** 2 + v1.y ** 2,\r\n        );\r\n    }\r\n\r\n    static Ang(v: VectorLike, deg?: boolean): number {\r\n        let res = Math.atan2(\r\n            v.y, v.x,\r\n        );\r\n\r\n        if (deg) {\r\n            res = res * 180 / Math.PI;\r\n        }\r\n\r\n        return res;\r\n    }\r\n    \r\n    static Nrm (v: VectorLike): VectorLike {\r\n        const m = V.Mag(v);\r\n\r\n        return {\r\n            x: v.x / m,\r\n            y: v.y / m,\r\n        }\r\n    }\r\n\r\n    static Cr (x: number, y: number): VectorLike {\r\n        return {\r\n            x, y\r\n        };\r\n    }\r\n}\r\n","export function generateId() {\r\n    const rand = (Math.random() * 10000) >> 0;\r\n\r\n    return (Date.now() + rand).toString(35);\r\n}","import { Graphics } from \"../core/graphics\";\r\nimport { Renderer } from \"../core/renderer\";\r\nimport { Scene } from \"../core/scene\";\r\nimport { SceneController } from \"../core/sceneController\";\r\n\r\nexport const sceneController = new SceneController();\r\nexport const renderer = new Renderer({\r\n    pixelated: false,\r\n});\r\nexport const { context } = renderer;\r\n\r\nGraphics.Context = context;\r\n\r\nexport function startEngine(scene: Scene) {\r\n    sceneController.load(scene);\r\n    renderer.render(sceneController.update);\r\n}\r\n","import { Scene, SceneEvents } from \"./scene\";\r\n\r\nexport class SceneController {\r\n    private currentScene!: Scene;\r\n\r\n    constructor() {\r\n        this.update = this.update.bind(this);\r\n    }\r\n\r\n    update() {\r\n        if (this.currentScene) {\r\n            this.currentScene.update();\r\n        }\r\n    }\r\n\r\n    load(scene: Scene) {\r\n        this.destroyScene();\r\n        this.setScene(scene);\r\n        this.currentScene.trigger(SceneEvents.LOAD);\r\n    }\r\n\r\n    private destroyScene() {\r\n        if (!this.currentScene) return;\r\n        this.currentScene.trigger(SceneEvents.DESTROY);\r\n    }\r\n\r\n    private setScene(scene: Scene) {\r\n        this.currentScene = scene;\r\n    }\r\n}","export enum ResourceEvents { \r\n    LOADED = 'fileLoaded',\r\n}","import { EventEmitter } from \"./event\";\r\nimport { ResourceEvents } from \"./types/fileManagerEvents.enum\";\r\n\r\nexport enum ResourceManagerEvents {\r\n    LOADING_FINISHED,\r\n    LOADING_STARTED,\r\n}\r\n\r\nexport class ResourceManager extends EventEmitter<ResourceManagerEvents> {\r\n    public pendingObjects: EventEmitter<ResourceEvents>[] = [];\r\n    \r\n    private _loadingState = false;\r\n    \r\n    public get isLoading() {\r\n        return this._loadingState;\r\n    } \r\n\r\n    private set isLoading(value) {\r\n        if (this._loadingState !== value) {\r\n            this._loadingState = value;\r\n      \r\n            this.trigger(value\r\n                ? ResourceManagerEvents.LOADING_STARTED\r\n                : ResourceManagerEvents.LOADING_FINISHED\r\n            );\r\n        }\r\n    }\r\n\r\n    public addResource(res: Resource) {\r\n        res.once(ResourceEvents.LOADED, () => {\r\n            this.removeResource(res);\r\n        });\r\n        this.pendingObjects.push(res);\r\n        this.isLoading = true;\r\n        return res;\r\n    }\r\n\r\n    public removeResource(res: Resource) {\r\n        this.pendingObjects = this.pendingObjects.filter((e) => e !== res);\r\n\r\n        if (!this.pendingObjects.length) {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport const DEFAULT_RESOURCE_MANAGER = new ResourceManager();\r\n\r\nexport class Resource<T extends (string | number) = any> extends EventEmitter<ResourceEvents | T> {\r\n    static Manager: ResourceManager = DEFAULT_RESOURCE_MANAGER;\r\n    static Events = ResourceEvents;\r\n\r\n    public isLoaded = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.loadResource();\r\n    }\r\n\r\n    private loadResource() {\r\n        Resource.Manager.addResource(this);\r\n        this.once(ResourceEvents.LOADED, () => { this.isLoaded = true; });\r\n    }\r\n}\r\n","import { Entity, EntityEvents } from \"./entity\";\r\n\r\nexport class Camera extends Entity {\r\n    public resolution: [ number, number ] = [1, 1];\r\n    public originalResolution: [ number, number ] = [1, 1];\r\n    public position = {\r\n        x: 0,\r\n        y: 0,\r\n    }\r\n    public rotation = 0;\r\n    public zoom = 1;\r\n    public entityToFollow?: Entity;\r\n    public followSmoothness = 16;\r\n\r\n    private sceneUpdate!: () => void;\r\n\r\n    constructor(private context: CanvasRenderingContext2D) {\r\n        super();\r\n        this.once(EntityEvents.SPAWN, () => {\r\n            this.applyResolution();\r\n            this.overwriteRendering();\r\n        });\r\n    }\r\n\r\n    private overwriteRendering() {\r\n        this.sceneUpdate = this.scene.update.bind(this.scene);\r\n        this.scene.update = this.update.bind(this);\r\n    }\r\n\r\n    private applyResolution() {\r\n        const { context } = this;\r\n\r\n        this.resolution = [\r\n            context.canvas.width,\r\n            context.canvas.height,\r\n        ]\r\n        this.originalResolution = [\r\n            context.canvas.width,\r\n            context.canvas.height,\r\n        ]\r\n    }\r\n\r\n    private get actualZoom(): [number, number] {\r\n        if (!this.resolution) return [1, 1];\r\n        return [\r\n            this.originalResolution[0] / (this.resolution[0] / this.zoom),\r\n            this.originalResolution[1] / (this.resolution[1] / this.zoom),\r\n        ]\r\n    }\r\n\r\n    private moveCameraToTarget() {\r\n        if (!this.entityToFollow) return;\r\n\r\n        const { x: tx, y: ty } = this.entityToFollow.position;\r\n\r\n        this.position.x -= (this.position.x - tx) / this.followSmoothness;\r\n        this.position.y -= (this.position.y - ty) / this.followSmoothness;\r\n    }\r\n\r\n    public update() {\r\n        const { context: c } = this;\r\n        if (!this.sceneUpdate) return;\r\n\r\n        this.moveCameraToTarget();\r\n\r\n        c.save()\r\n        this.applyCameraTransform();\r\n        this.sceneUpdate();\r\n        c.restore();\r\n    }\r\n\r\n    public applyCameraTransform() {\r\n        const { context: c } = this;\r\n        c.translate(this.resolution[0] / 2, this.resolution[1] / 2);\r\n        c.rotate(this.rotation / 180 * Math.PI);\r\n        c.scale(...this.actualZoom);\r\n        c.translate(-this.position.x, -this.position.y);\r\n    }\r\n}","import { EventEmitter } from \"./event\";\r\nimport {Graphics} from \"./graphics\";\r\nimport {Resource} from \"./resourceManager\";\r\nimport {ResourceEvents} from \"./types/fileManagerEvents.enum\";\r\n\r\nconst { round, PI } = Math;\r\n\r\ninterface SpriteOptions {\r\n    frameSize: [number, number];\r\n    offset?: [number, number];\r\n    scale: [number, number];\r\n    speed?: number;\r\n}\r\n\r\ninterface SpriteState {\r\n    frame: number,\r\n    offset: [number, number],\r\n    scale: [1, 1],\r\n    rotation: number,\r\n}\r\n\r\nconst DEFAULT_SPRITE_OPTIONS: Partial<SpriteOptions> = {\r\n    speed: 1,\r\n    offset: [0, 0],\r\n}\r\n\r\nexport default class Sprite extends Resource {\r\n    private image = new Image();\r\n    private options!: SpriteOptions;\r\n\r\n    public state: SpriteState = {\r\n        frame: 0,\r\n        offset: [0, 0],\r\n        scale: [1, 1],\r\n        rotation: 0,\r\n    };\r\n\r\n    constructor(\r\n        private filename: string,\r\n        options: SpriteOptions,\r\n    ) {\r\n        super();\r\n        this.setOptions(options);\r\n    }\r\n\r\n    private setOptions(options: SpriteOptions) {\r\n        this.options = {\r\n            ...DEFAULT_SPRITE_OPTIONS,\r\n            ...this.options,\r\n            ...options,\r\n        }\r\n\r\n        this.loadImage();\r\n    }\r\n\r\n    private loadImage() {\r\n        const onImageLoaded = () => {\r\n            this.trigger(Resource.Events.LOADED, this);\r\n        }\r\n        this.image.src = `/sprites/${this.filename}`    \r\n        this.image.addEventListener('load', onImageLoaded)\r\n    }\r\n    \r\n    private get frameState(): [number, number, number, number] {\r\n        if (!this.isLoaded) return [0, 0, 0, 0];\r\n\r\n        let { frame } = this.state;\r\n        frame = round(frame);\r\n\r\n        const { width, height } = this.image;\r\n        const [fw, fh] = this.options.frameSize;\r\n        const mx = ((width / fw) >> 0);\r\n        const my = ((height / fh) >> 0);\r\n\r\n        const ix = frame % mx;\r\n        const iy = (frame / mx) % my >> 0;\r\n\r\n        const fx = round(fw * ix);\r\n        const fy = round(fh * iy);\r\n\r\n        return [fx, fy, fw, fh];\r\n    }\r\n\r\n    private applyTransform(x: number, y: number) {\r\n        const { rotation, scale, offset } = this.state;\r\n        const [ ox, oy ] = offset;\r\n        const [ sx, sy ] = scale;\r\n        const { Context: c } = Graphics;\r\n\r\n        c.rotate(rotation / 180 * PI);\r\n        c.scale(sx, sy);\r\n        c.translate(x - ox, y - oy);\r\n    }\r\n\r\n    render(x: number, y: number) {\r\n        if (!this.isLoaded) return;\r\n\r\n        const { image, state, options, frameState } = this;\r\n        const { speed = 1 } = options;\r\n        const { Context: c } = Graphics;\r\n        const [fw, fh] = options.frameSize;\r\n\r\n        c.save();\r\n        this.applyTransform(x, y);\r\n        c.drawImage(\r\n            image, ...frameState,\r\n            0, 0, fw, fh,\r\n        );\r\n        c.restore();\r\n\r\n        state.frame += speed;\r\n    }\r\n\r\n    public clone() {\r\n        return new Sprite(this.filename, this.options);\r\n    }\r\n}\r\n","import Matter, {Composite} from \"matter-js\";\r\nimport { Entity, EntityEvents } from \"../../core/entity\";\r\nimport Sprite from \"../../core/sprite\";\r\nimport {V} from \"../../core/utils/vectorUtil\";\r\n\r\ninterface ActorOptions {\r\n    collider: Matter.Body,\r\n}\r\n\r\ninterface ActorSpriteList {\r\n    [k: string]: Sprite;\r\n}\r\n\r\nexport abstract class Actor<S extends ActorSpriteList = any> extends Entity {\r\n    public spriteIndex: keyof S = 'default';\r\n    \r\n    public position = V.Cr(0, 0); \r\n\r\n    constructor (\r\n        protected collider: Matter.Body,\r\n        protected spriteList: S,\r\n    ) {\r\n        super();\r\n        this.prepareSprites();\r\n        this.once(EntityEvents.SPAWN, () => this.preparePhysics());\r\n        this.once(EntityEvents.SPAWN, this.start.bind(this));\r\n    }\r\n\r\n\r\n    public get sprite() {\r\n        return this.spriteList[this.spriteIndex];\r\n    }\r\n\r\n    private preparePhysics() {\r\n        Composite.add(this.scene.world, this.collider);\r\n    }\r\n\r\n    public prepareSprites() {\r\n        const t = this.spriteList as ActorSpriteList;\r\n        Object\r\n            .entries(t)\r\n            .forEach(([k, s]) => {\r\n                t[k] = s.clone();\r\n            })\r\n    }\r\n    \r\n    public renderSprite() {\r\n        if (!this.sprite) return;\r\n        const { position, angle } = this.collider;\r\n        const { x, y } = position;\r\n       \r\n        this.sprite.state.rotation = angle * 180 / Math.PI;\r\n        this.sprite.render(x, y);\r\n    }\r\n\r\n    public update() {\r\n        this.renderSprite();\r\n    }\r\n\r\n    public start() {}\r\n}\r\n","import Matter from \"matter-js\";\r\nimport Sprite from \"../../core/sprite\";\r\nimport {V} from \"../../core/utils/vectorUtil\";\r\nimport {Actor} from \"./actor\";\r\n\r\nconst PLAYER_SPRITELIST = {\r\n    default: new Sprite('box.jpg', {\r\n        frameSize: [256, 256], \r\n        offset: [128, 128],\r\n        scale: [0.125, 0.125],\r\n    })\r\n}\r\n\r\nexport class Player extends Actor {\r\n    constructor() {\r\n        super(\r\n            Matter.Bodies.rectangle(0, 0, 32, 32),\r\n            PLAYER_SPRITELIST,\r\n        );\r\n\r\n        Matter.Body.setPosition(this.collider, V.Add({...this.position}, { x: 200, y: 0 }));\r\n        console.log(this.spriteList, this.sprite);\r\n    }\r\n\r\n    start() {\r\n        this.sprite.scale = [0.125, 0.125];\r\n    }\r\n\r\n    update() {\r\n        super.update();\r\n\r\n        console.log(this.collider.position);\r\n    }   \r\n}\r\n","import { Bodies, Composite } from \"matter-js\";\r\nimport { Camera } from \"../../core/camera\";\r\nimport { DEFAULT_RESOURCE_MANAGER } from \"../../core/resourceManager\";\r\nimport { Scene } from \"../../core/scene\";\r\nimport { context as c } from \"../engine\";\r\nimport {Player} from \"../entities/player\";\r\n\r\nclass _Gameplay extends Scene {\r\n    private camera = new Camera(c);\r\n\r\n    private player = new Player();\r\n\r\n    start() {\r\n        this.addEntity(this.player);\r\n        Composite.add(\r\n            this.world,\r\n            Bodies.rectangle(400, 400, 800, 40, { isStatic: true }),\r\n        );\r\n\r\n        this.camera.position.x += 400;\r\n        this.camera.position.y += 240;\r\n    }\r\n\r\n\r\n    update() {\r\n        if (DEFAULT_RESOURCE_MANAGER.isLoading) {\r\n            c.fillStyle = \"#fff\";\r\n            c.textBaseline = \"middle\";\r\n            c.textAlign = \"center\";\r\n            c.fillText(\"Loading...\", 0, 0);\r\n            return;\r\n        }\r\n\r\n        this.camera.update();\r\n\r\n        super.update();\r\n\r\n        c.save();\r\n        c.globalCompositeOperation = \"screen\";\r\n        c.drawImage(this.render.canvas, 0, 0);\r\n        c.restore();\r\n    }\r\n}\r\n\r\nexport const Gameplay = new _Gameplay();\r\n","import { startEngine } from \"./game/engine\";\r\nimport { Gameplay } from \"./game/scenes/gameplay\";\r\n\r\nstartEngine(Gameplay);"],"names":["Graphics","grid","x","y","w","h","s","c","Context","beginPath","linesV","linesH","i","x2","_y","moveTo","lineTo","y2","_x","stroke","EventEmitter","events","on","event","handler","options","this","isEventTypeDefined","defineEventType","eventListener","push","_this","removeListener","once","args","trigger","eventName","details","forEach","bind","_this2","checkEventListener","takes","filter","e","length","Renderer","domElement","document","createElement","context","setOptions","newOptions","DEFAULT_OPTIONS","applyOptions","render","func","clear","requestAnimationFrame","fillStyle","fillRect","canvas","width","height","resolution","pixelated","targetContainer","getContext","alpha","imageSmoothingEnabled","style","imageRendering","querySelector","appendChild","EntityEvents","factory","modules","installedModules","__webpack_require__","moduleId","exports","module","l","call","m","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","n","object","property","prototype","hasOwnProperty","p","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","source","prop","constructor","clone","keys","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","global","Bounds","vertices","bounds","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","vertice","dx","dy","nextVertice","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","eventNames","callback","names","off","callbacks","newCallbacks","eventClone","Composite","Body","id","type","parent","isModified","bodies","constraints","composites","label","plugin","setModified","composite","updateParents","updateChildren","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","keepStatic","isStatic","allBodies","allConstraints","allComposites","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","visible","opacity","strokeStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevY","applyForce","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","wasSleeping","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normal","normalVelocity","relativeVelocity","massTotal","resistanceTotal","zero","postSolveAll","Pair","Contact","timestamp","parentA","parentB","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","supports","collided","support","contactId","depth","setActive","gradient","toFixed","xx","axis","Bodies","rectangle","trapezoid","slope","x1","x3","circle","maxSides","sides","ceil","polygon","PI","offset","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","partA","partB","pav","pbv","da","db","Mouse","element","mouse","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","Detector","SAT","collisions","broadphasePairs","engine","pairsTable","table","canCollide","collides","filterA","filterB","previousCollision","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","_overlapAxes","axisNumber","reused","overlap","tangent","penetration","verticesB","_findSupports","verticesA","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","nearestDistance","vertexToBody","bodyAPosition","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","pattern","exec","major","minor","patch","isRange","operator","prerelease","Render","_requestAnimationFrame","_cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","textures","setPixelRatio","run","loop","time","_updateTiming","world","stats","stop","_getPixelRatio","setAttribute","lookAt","padding","center","outerRatio","innerRatio","startViewTransform","setTransform","endViewTransform","startTime","currentBackground","_applyBackground","globalCompositeOperation","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","sections","Part","Cons","Comp","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","rateMean","fps","gap","round","count","indicator","plotY","start","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","buckets","bucketId","region","bucketWidth","bucketHeight","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","Grid","positionIterations","velocityIterations","constraintIterations","gravity","broadphase","metrics","gridPairs","_bodiesApplyGravity","_bodiesUpdate","pairsList","removeOld","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","bodyBtoA","contactShare","tempA","tempB","tempC","tempD","contact","contactVertex","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","velocityPointB","tangentVelocity","tangentSpeed","tangentVelocityDirection","normalForce","maxFriction","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","_pairMaxIdleLife","pairId","pairIndex","indexesToRemove","forceUpdate","col","row","bucket","gridChanged","newRegion","_getRegion","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","column","pairKeys","Matter","Composites","MouseConstraint","Query","Runner","Svg","World","before","after","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","xOffsetA","yOffsetA","xOffsetB","yOffsetB","mesh","crossBrace","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","mouseConstraint","_triggerEvents","mouseEvents","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","outside","_frameTimeout","clearTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","timePrev","timeScalePrev","isFixed","deltaMin","deltaMax","tick","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","SceneEvents","Entity","scene","setScene","compose","fn1","reduce","prevFn","nextFn","V","Add","v1","v2","Sub","from","Copy","JSON","parse","stringify","Dot","Mag","Ang","deg","res","Nrm","Cr","Scene","entities","destroy","preStart","postDestroy","startHandler","destroyHandler","LOAD","DESTROY","addEntity","entity","rand","SPAWN","updateObjects","resetPhysics","sceneController","currentScene","load","destroyScene","renderer","ResourceEvents","ResourceManagerEvents","Camera","originalResolution","zoom","entityToFollow","followSmoothness","sceneUpdate","applyResolution","overwriteRendering","moveCameraToTarget","ty","save","applyCameraTransform","restore","actualZoom","ResourceManager","pendingObjects","_loadingState","addResource","LOADED","removeResource","isLoading","LOADING_STARTED","LOADING_FINISHED","DEFAULT_RESOURCE_MANAGER","Resource","_this3","isLoaded","loadResource","Manager","_this4","DEFAULT_SPRITE_OPTIONS","Sprite","filename","state","frame","loadImage","applyTransform","ox","oy","sx","sy","frameState","frameSize","fw","fh","mx","iy","Actor","collider","spriteList","spriteIndex","prepareSprites","preparePhysics","entries","renderSprite","PLAYER_SPRITELIST","default","Player","_Actor","_Gameplay","camera","player","_Scene","Gameplay"],"mappings":"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"}