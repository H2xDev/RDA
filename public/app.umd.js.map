{"version":3,"file":"app.umd.js","sources":["../core/entity.ts","../core/event.ts","../core/renderer.ts","../core/scene.ts","../core/generateId.ts","../game/engine.ts","../core/sceneController.ts","../core/camera.ts","../game/scenes/gameplay.ts","../main.ts"],"sourcesContent":["import { EventEmitter } from \"./event\";\r\nimport { Scene } from \"./scene\";\r\n\r\nexport enum EntityEvents {\r\n    SPAWN, DESTROY\r\n}\r\n\r\nexport class Entity extends EventEmitter<EntityEvents> {\r\n    protected scene!: Scene;\r\n    public position = { x: 0, y: 0 };\r\n\r\n    public update() {}\r\n\r\n    public setScene<T extends Scene>(scene: T) {\r\n        this.scene = scene;\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * Event Listener Options\r\n */\r\nexport interface EventListenerOptions {\r\n    /**\r\n     * Removes the listener after the trigger\r\n     */\r\n    once?: boolean;\r\n    /**\r\n     * Removes the listener after the trigger a certain number of times\r\n     */\r\n    takes?: number;\r\n}\r\n\r\n/**\r\n * @param T - type of details\r\n * @param H - type of return value\r\n */\r\nexport type EventHandler<T = any, H = void> = (details: T) => H;\r\n\r\nexport type UnsubscribeFunction = () => void;\r\n\r\nexport interface EventListener<E extends (string | number) = string, T = any, H = void> {\r\n    handler: EventHandler<T, H>;\r\n    options: EventListenerOptions;\r\n    event: E;\r\n}\r\n\r\nexport interface EventEmitterTypes<E extends (string | number) = string> {\r\n    [eventName: string]: EventListener<E>[];\r\n}\r\n\r\nexport class EventEmitter<EventList extends (string | number) = string> {\r\n    private events: EventEmitterTypes<EventList> = {}\r\n\r\n    /**\r\n     *\r\n     * @param event Event type\r\n     * @param handler listener\r\n     * @param options options\r\n     */\r\n    public on<T = any, H = void>(\r\n        event: EventList,\r\n        handler: EventHandler<T, H>,\r\n        options: EventListenerOptions = {},\r\n    ): UnsubscribeFunction {\r\n        if (!this.isEventTypeDefined(event)) {\r\n            this.defineEventType(event);\r\n        }\r\n\r\n        const eventListener: EventListener<EventList> = {\r\n            handler,\r\n            options,\r\n            event,\r\n        };\r\n\r\n        this.events[event].push(eventListener);\r\n\r\n        return () => this.removeListener(event, eventListener.handler);\r\n    }\r\n\r\n    public once<T = any, H = void>(...args: Parameters<EventEmitter<EventList>['on']>) {\r\n        args[2] = args[2] ? { ...args[2], once: true } : { once: true };\r\n        return this.on(...args);\r\n    }\r\n\r\n    public trigger<T = any>(eventName: EventList, details?: T): void {\r\n        if (!this.isEventTypeDefined(eventName)) {\r\n            return;\r\n        }\r\n        this.events[eventName].forEach((eventListener) => {\r\n            eventListener.handler.bind(this)(details);\r\n        });\r\n        this.events[eventName].forEach(this.checkEventListener.bind(this));\r\n    }\r\n\r\n    private checkEventListener(eventListener: EventListener<EventList>): void {\r\n        const { event: eventName } = eventListener;\r\n        if (eventListener.options.once) {\r\n            this.removeListener(eventName, eventListener.handler);\r\n        }\r\n\r\n        if (typeof eventListener.options.takes === 'number') {\r\n            // eslint-disable-next-line no-param-reassign\r\n            eventListener.options.takes -= 1;\r\n            if (eventListener.options.takes === 0) {\r\n                this.removeListener(eventName, eventListener.handler);\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeListener(event: EventList, handler: EventHandler): void {\r\n        this.events[event] = this.events[event].filter((e) => e.handler !== handler);\r\n\r\n        if (!this.events[event].length) {\r\n            delete this.events[event];\r\n        }\r\n    }\r\n\r\n    private isEventTypeDefined(eventName: EventList): boolean {\r\n        return !!this.events[eventName];\r\n    }\r\n\r\n    private defineEventType(eventName: EventList): void {\r\n        this.events[eventName] = [];\r\n    }\r\n}\r\n\r\nexport default {};\r\n","import { EventEmitter } from \"./event\";\r\n\r\ntype RendererEventList = 'beforeRender' | 'afterRender';\r\n\r\ninterface RendererOptions {\r\n    resolution: [number, number];\r\n    pixelated: boolean;\r\n    targetContainer: string;\r\n}\r\n\r\ntype RenderFunction = () => void;\r\n\r\nconst DEFAULT_OPTIONS: RendererOptions = {\r\n    resolution: [800, 480],\r\n    pixelated: true,\r\n    targetContainer: 'body',\r\n}\r\n\r\nexport class Renderer extends EventEmitter<RendererEventList> {\r\n    static DEFAULT_OPTIONS = DEFAULT_OPTIONS;\r\n\r\n    public domElement = document.createElement('canvas');\r\n    public context!: CanvasRenderingContext2D;\r\n\r\n    private options!: RendererOptions;\r\n\r\n    constructor(options?: RendererOptions) {\r\n        super();\r\n\r\n        this.setOptions(options || {});\r\n    }\r\n\r\n    public setOptions(newOptions: Partial<RendererOptions>) {\r\n        this.options = {\r\n            ...Renderer.DEFAULT_OPTIONS,\r\n            ...newOptions,\r\n        }\r\n\r\n        this.applyOptions();\r\n    }\r\n\r\n    public render(func: RenderFunction) {\r\n        this.clear();\r\n        requestAnimationFrame(() => this.render(func));\r\n\r\n        this.trigger('beforeRender');\r\n        func();\r\n        this.trigger('afterRender');\r\n    }\r\n\r\n    public clear() {\r\n        const { context: c } = this;\r\n\r\n        c.fillStyle = \"#000\";\r\n        c.fillRect(0, 0, c.canvas.width, c.canvas.height);\r\n    }\r\n\r\n    private applyOptions() {\r\n        const [ width, height ] = this.options.resolution;\r\n        const { pixelated, targetContainer } = this.options;\r\n\r\n        this.domElement.width = width;\r\n        this.domElement.height = height;\r\n        this.context = this.domElement\r\n            .getContext('2d', { alpha: false })!;\r\n        \r\n        this.context.imageSmoothingEnabled = !pixelated;\r\n        this.domElement.style.imageRendering = pixelated ? 'pixelated' : '';\r\n\r\n        document\r\n            .querySelector(targetContainer)!\r\n            .appendChild(this.domElement);\r\n    }\r\n}","import { Entity, EntityEvents } from \"./entity\";\r\nimport { EventEmitter } from \"./event\";\r\nimport { generateId } from \"./generateId\";\r\n\r\nexport enum SceneEvents {\r\n    LOAD, DESTROY\r\n}\r\n\r\nexport class Scene extends EventEmitter<SceneEvents> {\r\n    private entities: { [k: string]: Entity } = {};\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.on(SceneEvents.LOAD, () => this.start())\r\n        this.on(SceneEvents.DESTROY, () => this.destroy());\r\n    }\r\n\r\n    public addEntity<T extends Entity>(entity: T, id: string = generateId()) {\r\n        this.entities[id] = entity;\r\n        entity.setScene(this);\r\n        entity.trigger(EntityEvents.SPAWN);\r\n\r\n        return entity;\r\n    }\r\n\r\n    private updateObjects() {\r\n        const update = (entity: Entity) => entity.update?.();\r\n\r\n        Object\r\n            .values(this.entities)\r\n            .forEach(update);\r\n    }\r\n\r\n    public update() {\r\n        this.updateObjects();\r\n    }\r\n\r\n    public start() {}\r\n\r\n    public destroy() {\r\n        this.entities = {};\r\n    }\r\n}","export function generateId() {\r\n    const rand = (Math.random() * 10000) >> 0;\r\n\r\n    return (Date.now() + rand).toString(35);\r\n}","import { Graphics } from \"../core/graphics\";\r\nimport { Renderer } from \"../core/renderer\";\r\nimport { Scene } from \"../core/scene\";\r\nimport { SceneController } from \"../core/sceneController\";\r\n\r\n\r\nexport const sceneController = new SceneController();\r\nexport const renderer = new Renderer();\r\nexport const { context } = renderer;\r\n\r\n\r\nGraphics.Context = context;\r\n\r\nexport function startEngine(scene: Scene) {\r\n    sceneController.load(scene);\r\n    renderer.render(sceneController.update);\r\n}","import { Scene, SceneEvents } from \"./scene\";\r\n\r\nexport class SceneController {\r\n    private currentScene!: Scene;\r\n\r\n    constructor() {\r\n        this.update = this.update.bind(this);\r\n    }\r\n\r\n    update() {\r\n        if (this.currentScene) {\r\n            this.currentScene.update();\r\n        }\r\n    }\r\n\r\n    load(scene: Scene) {\r\n        this.destroyScene();\r\n        this.setScene(scene);\r\n        this.currentScene.trigger(SceneEvents.LOAD);\r\n    }\r\n\r\n    private destroyScene() {\r\n        if (!this.currentScene) return;\r\n        this.currentScene.trigger(SceneEvents.DESTROY);\r\n    }\r\n\r\n    private setScene(scene: Scene) {\r\n        this.currentScene = scene;\r\n    }\r\n}","import { context as c, context} from \"../game/engine\";\r\nimport { Entity, EntityEvents } from \"./entity\";\r\n\r\nexport class Camera extends Entity {\r\n    public resolution: [ number, number ] = [1, 1];\r\n    public originalResolution: [ number, number ] = [1, 1];\r\n    public position = {\r\n        x: 0,\r\n        y: 0,\r\n    }\r\n    public rotation = 0;\r\n    public zoom = 1;\r\n    public entityToFollow?: Entity;\r\n    public followSmoothness = 16;\r\n\r\n    private sceneUpdate!: () => void;\r\n\r\n    constructor() {\r\n        super();\r\n        this.once(EntityEvents.SPAWN, () => {\r\n            this.applyResolution();\r\n            this.overrideRendering();\r\n        });\r\n    }\r\n\r\n    private overrideRendering() {\r\n        this.sceneUpdate = this.scene.update.bind(this.scene);\r\n        this.scene.update = this.update.bind(this);\r\n    }\r\n\r\n    private applyResolution() {\r\n        this.resolution = [\r\n            context.canvas.width,\r\n            context.canvas.height,\r\n        ]\r\n        this.originalResolution = [\r\n            context.canvas.width,\r\n            context.canvas.height,\r\n        ]\r\n    }\r\n\r\n    private get actualZoom(): [number, number] {\r\n        if (!this.resolution) return [1, 1];\r\n        return [\r\n            this.originalResolution[0] / (this.resolution[0] / this.zoom),\r\n            this.originalResolution[1] / (this.resolution[1] / this.zoom),\r\n        ]\r\n    }\r\n\r\n    private moveCameraToTarget() {\r\n        if (!this.entityToFollow) return;\r\n\r\n        const { x: tx, y: ty } = this.entityToFollow.position;\r\n\r\n        this.position.x -= (this.position.x - tx) / this.followSmoothness;\r\n        this.position.y -= (this.position.y - ty) / this.followSmoothness;\r\n    }\r\n\r\n    public update() {\r\n        if (!this.sceneUpdate) return;\r\n\r\n        this.moveCameraToTarget();\r\n\r\n        c.save()\r\n        this.applyCameraTransform();\r\n        this.sceneUpdate();\r\n        c.restore();\r\n    }\r\n\r\n    public applyCameraTransform() {\r\n        c.translate(this.resolution[0] / 2, this.resolution[1] / 2);\r\n        c.rotate(this.rotation / 180 * Math.PI);\r\n        c.scale(...this.actualZoom);\r\n        c.translate(-this.position.x, -this.position.y);\r\n    }\r\n}","import { Camera } from \"../../core/camera\";\r\nimport { Graphics } from \"../../core/graphics\";\r\nimport { Scene } from \"../../core/scene\";\r\nimport { context as c } from \"../engine\";\r\n\r\nlet frame = 0;\r\n\r\nclass _Gameplay extends Scene {\r\n    private camera = new Camera();\r\n\r\n    start() {\r\n        this.addEntity(this.camera);\r\n    }\r\n\r\n\r\n    update() {\r\n    }\r\n}\r\n\r\nexport const Gameplay = new _Gameplay();\r\n","import { startEngine } from \"./game/engine\";\r\nimport { Gameplay } from \"./game/scenes/gameplay\";\r\n\r\nstartEngine(Gameplay);"],"names":["EntityEvents","EventEmitter","events","on","event","handler","options","this","isEventTypeDefined","defineEventType","eventListener","push","_this","removeListener","once","args","trigger","eventName","details","forEach","bind","_this2","checkEventListener","takes","filter","e","length","Renderer","domElement","document","createElement","context","setOptions","newOptions","DEFAULT_OPTIONS","applyOptions","render","func","clear","requestAnimationFrame","c","fillStyle","fillRect","canvas","width","height","resolution","pixelated","targetContainer","getContext","alpha","imageSmoothingEnabled","style","imageRendering","querySelector","appendChild","SceneEvents","Entity","scene","position","x","y","update","setScene","Scene","entities","LOAD","start","DESTROY","destroy","addEntity","entity","id","rand","Math","random","Date","now","toString","SPAWN","updateObjects","Object","values","sceneController","currentScene","load","destroyScene","renderer","Camera","originalResolution","rotation","zoom","entityToFollow","followSmoothness","sceneUpdate","applyResolution","overrideRendering","moveCameraToTarget","ty","save","applyCameraTransform","restore","translate","rotate","PI","scale","actualZoom","_Gameplay","camera","Gameplay"],"mappings":"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"}